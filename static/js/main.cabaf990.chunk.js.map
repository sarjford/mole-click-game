{"version":3,"sources":["assets/mole.png","utils.ts","components/Mole.tsx","hooks/usePersistData.ts","App.tsx","constants.ts","index.tsx"],"names":["getRandomNumber","max","Math","floor","random","Mole","props","index","removeMole","playing","setScore","useState","moleIsHit","setMoleIsHit","useEffect","duration","timer","setTimeout","clearTimeout","onClick","prevScore","className","src","moleImage","alt","usePersistData","key","defaultValue","window","savedValue","localStorage","getItem","JSON","parse","value","setValue","setItem","stringify","App","Array","fill","gameBoard","setGameBoard","time","setTime","score","setPlaying","timeRef","useRef","timerRef","current","addMolesToBoard","useCallback","prevState","tempGameBoard","numberOfMoles","reduce","a","b","concat","sort","slice","forEach","item","startTimer","setInterval","resetGame","clearInterval","map","moleIsPresent","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,MAA0B,iCCAlC,SAASA,EAAgBC,GAC9B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAM,GAAK,G,WC8CjCI,MApCf,SAAcC,GACZ,IAAQC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,WAAYC,EAAsBH,EAAtBG,QAASC,EAAaJ,EAAbI,SAEpC,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KA0BA,OAVAC,qBAAU,WACR,GAAIL,EAAS,CACX,IAAMM,EAAgC,IAArBf,EAAgB,GAC3BgB,EAAQC,YAAW,WACvBT,EAAWD,KACVQ,GACH,OAAO,kBAAMG,aAAaF,OAE3B,CAACP,EAASF,EAAOC,IAGlB,qBAAKW,QAxBa,WAClB,GAAIV,EAAS,CACXI,GAAa,GACb,IAAMG,EAAQC,YAAW,WACvBJ,GAAa,GACbH,GAAS,SAACU,GAAD,OAAuBA,EAAY,KAC5CZ,EAAWD,KACV,KACH,OAAO,kBAAMW,aAAaF,MAgBDK,UAAS,UAAKT,GAAa,OAAtD,SACE,qBAAKU,IAAKC,EAAWC,IAAI,+BCvClBC,EAAiB,SAC5BC,EACAC,GAEA,MAA0BhB,oBAAS,WACjC,GAAsB,qBAAXiB,OAAwB,CACjC,IAAMC,EAAaC,aAAaC,QAAQL,GACxC,OAAsB,OAAfG,EAAsBG,KAAKC,MAAMJ,GAAcF,MAH1D,mBAAOO,EAAP,KAAcC,EAAd,KAWA,OAJArB,qBAAU,WACRgB,aAAaM,QAAQV,EAAKM,KAAKK,UAAUH,MACxC,CAACR,EAAKQ,IAEF,CAACA,EAAOC,IC0HFG,MApIf,WAGE,MAAkCb,EAChC,YACA,IAAIc,MCX+B,IDWRC,MAAK,IAFlC,mBAAOC,EAAP,KAAkBC,EAAlB,KAIA,EAAwBjB,EAAe,OCfP,IDehC,mBAAOkB,EAAP,KAAaC,EAAb,KACA,EAA0BnB,EAAe,QAAS,GAAlD,mBAAOoB,EAAP,KAAcnC,EAAd,KACA,EAA8BC,oBAAS,GAAvC,mBAAOF,EAAP,KAAgBqC,EAAhB,KAGMC,EAA4BC,iBCpBF,IDqB1BC,EAA+CD,iBAAO,MAC5DlC,qBAAU,WACRiC,EAAQG,QAAUP,KAIpB,IAAMQ,EAAkBC,uBAAY,WAClCV,GAAa,SAACW,GACZ,IAAMC,EAAa,YAAOD,GAGpBE,EAAgBvD,EAAgB,GAgBtC,OAbmBsD,EAAcE,QAC/B,SAACC,EAAGC,EAAGnD,GAAP,OAAmBmD,EAAsBD,EAAlBA,EAAEE,OAAOpD,KAChC,IAKCqD,MAAK,iBAAM,GAAM1D,KAAKE,YACtByD,MAAM,EAAGN,GAEIO,SAAQ,SAACC,GACvBT,EAAcS,IAAQ,KAEjBT,OAER,CAACZ,IAGElC,EAAa4C,uBACjB,SAAC7C,GACCmC,GAAa,SAACW,GACZ,IAAMC,EAAa,YAAOD,GAE1B,OADAC,EAAc/C,IAAS,EAChB+C,OAGX,CAACZ,IAIGsB,EAAaZ,uBAAY,WAC7BD,IACAL,GAAW,GACXG,EAASC,QAAUe,aAAY,WAC7BrB,EAAQG,EAAQG,QAAU,GAC1BC,MACC,OACF,CAACA,EAAiBP,IAGfsB,EAAYd,uBAAY,WAC5BR,EC5E8B,ID6E9BF,EAAa,IAAIH,MC3EkB,ID2EKC,MAAK,IAC7C9B,EAAS,KACR,CAACkC,EAASF,EAAchC,IAU3B,OAPAI,qBAAU,WACJ6B,GClFwB,IDmF1BG,GAAW,GACXqB,cAAclB,EAASC,YAExB,CAACP,EAAMG,IAGR,sBAAKzB,UAAU,MAAf,UACE,iCACE,mDAEF,iCACE,0BAASA,UAAU,aAAnB,UACE,wCACO,+BAAOwB,OAEd,uCACM,+BAAOF,UAIf,0BACEtB,UAAS,sBAAiBZ,GAAW,iBACrC,cAAY,aAFd,UAIE,sBAAMY,UAAU,aAChB,sBAAMA,UAAU,cAChB,sBAAMA,UAAU,gBAEfoB,EAAU2B,KAAI,SAACC,EAAwB9D,GAAzB,OACb,qBAAKc,UAAU,YAAf,SACGgD,GACC,cAAC,EAAD,CACE7D,WAAYA,EACZD,MAAOA,EACPG,SAAUA,EACVD,QAASA,KANiBF,SAapC,yBAASc,UAAU,eAAnB,SC7HwB,ID8HrBsB,EACC,wBAAQxB,QAAS+C,EAAjB,wBAEA,wBAAQ/C,QAAS6C,EAAYM,SAAU7D,EAAvC,4BE7HZ8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cabaf990.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mole.cbaf3b29.png\";","export function getRandomNumber(max: number) {\n  return Math.floor(Math.random() * (max - 1) + 1);\n}\n","import moleImage from '../assets/mole.png';\nimport { useEffect, useState } from 'react';\nimport { getRandomNumber } from '../utils';\n\ninterface MoleProps {\n  index: number;\n  removeMole: (index: number) => void;\n  playing: boolean;\n  setScore: (value: number | ((prevScore: number) => number)) => void;\n}\n\nfunction Mole(props: MoleProps) {\n  const { index, removeMole, playing, setScore } = props;\n\n  const [moleIsHit, setMoleIsHit] = useState(false);\n\n  // on click, show hit success UI and remove mole\n  const handleClick = () => {\n    if (playing) {\n      setMoleIsHit(true);\n      const timer = setTimeout(() => {\n        setMoleIsHit(false);\n        setScore((prevScore: number) => prevScore + 1);\n        removeMole(index);\n      }, 300);\n      return () => clearTimeout(timer);\n    }\n  };\n\n  // remove mole after 1-3 seconds\n  useEffect(() => {\n    if (playing) {\n      const duration = getRandomNumber(4) * 1000;\n      const timer = setTimeout(() => {\n        removeMole(index);\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [playing, index, removeMole]);\n\n  return (\n    <div onClick={handleClick} className={`${moleIsHit && 'hit'}`}>\n      <img src={moleImage} alt=\"Brown mole illustration\" />\n    </div>\n  );\n}\n\nexport default Mole;\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\n// custom hook to get and set a value to local storage state and app state\nexport const usePersistData = (\n  key: string,\n  defaultValue: boolean[] | boolean | number\n): [any, Dispatch<SetStateAction<any>>] => {\n  const [value, setValue] = useState(() => {\n    if (typeof window !== 'undefined') {\n      const savedValue = localStorage.getItem(key);\n      return savedValue !== null ? JSON.parse(savedValue) : defaultValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};\n","import Mole from './components/Mole';\nimport { useEffect, useState, useRef, useCallback } from 'react';\n\nimport { usePersistData } from './hooks/usePersistData';\n\nimport { START_TIME, END_TIME, BOARDGAME_CELLS } from './constants';\nimport { getRandomNumber } from './utils';\n\nfunction App() {\n\n  // state hooks\n  const [gameBoard, setGameBoard] = usePersistData(\n    'gameBoard',\n    new Array(BOARDGAME_CELLS).fill(false)\n  );\n  const [time, setTime] = usePersistData('time', START_TIME);\n  const [score, setScore] = usePersistData('score', 0);\n  const [playing, setPlaying] = useState(false);\n\n  // refs\n  const timeRef: { current: any } = useRef(START_TIME);\n  const timerRef: { current: NodeJS.Timeout | null } = useRef(null);\n  useEffect(() => {\n    timeRef.current = time;\n  });\n\n  // show random set of moles each second\n  const addMolesToBoard = useCallback(() => {\n    setGameBoard((prevState: boolean[]) => {\n      const tempGameBoard = [...prevState];\n\n      // get random number of moles 1-5\n      const numberOfMoles = getRandomNumber(6);\n\n      // get vacant cells\n      const emptyHomes = tempGameBoard.reduce<number[]>(\n        (a, b, index) => (!b ? a.concat(index) : a),\n        []\n      );\n\n      // fill random cells with random number of moles\n      const newMolesByIndex = emptyHomes\n        .sort(() => 0.5 - Math.random())\n        .slice(0, numberOfMoles);\n\n      newMolesByIndex.forEach((item) => {\n        tempGameBoard[item] = true;\n      });\n      return tempGameBoard;\n    });\n  }, [setGameBoard]);\n\n  // remove a mole from game board\n  const removeMole = useCallback(\n    (index) => {\n      setGameBoard((prevState: boolean[]) => {\n        const tempGameBoard = [...prevState];\n        tempGameBoard[index] = false;\n        return tempGameBoard;\n      });\n    },\n    [setGameBoard]\n  );\n\n  // click handler to start game\n  const startTimer = useCallback(() => {\n    addMolesToBoard();\n    setPlaying(true);\n    timerRef.current = setInterval(() => {\n      setTime(timeRef.current - 1);\n      addMolesToBoard();\n    }, 1000);\n  }, [addMolesToBoard, setTime]);\n\n  // click handler to reset game once it ends\n  const resetGame = useCallback(() => {\n    setTime(START_TIME);\n    setGameBoard(new Array(BOARDGAME_CELLS).fill(false));\n    setScore(0);\n  }, [setTime, setGameBoard, setScore]);\n\n  // when time is done, end game\n  useEffect(() => {\n    if (time <= END_TIME) {\n      setPlaying(false);\n      clearInterval(timerRef.current as NodeJS.Timeout);\n    }\n  }, [time, setPlaying]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>mole click game</h1>\n      </header>\n      <main>\n        <section className=\"game-stats\">\n          <div>\n            Score<span>{score}</span>\n          </div>\n          <div>\n            Time<span>{time}</span>\n          </div>\n        </section>\n\n        <section\n          className={`game-board ${!playing && 'game-finished'}`}\n          data-testid=\"game-board\"\n        >\n          <span className=\"top left\"></span>\n          <span className=\"top right\"></span>\n          <span className=\"bottom left\"></span>\n\n          {gameBoard.map((moleIsPresent: boolean, index: number) => (\n            <div className=\"mole-home\" key={index}>\n              {moleIsPresent && (\n                <Mole\n                  removeMole={removeMole}\n                  index={index}\n                  setScore={setScore}\n                  playing={playing}\n                />\n              )}\n            </div>\n          ))}\n        </section>\n\n        <section className=\"game-buttons\">\n          {time === END_TIME ? (\n            <button onClick={resetGame}>RESET GAME</button>\n          ) : (\n            <button onClick={startTimer} disabled={playing}>\n              START\n            </button>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","export const START_TIME: number = 60;\nexport const END_TIME: number = 0;\nexport const BOARDGAME_CELLS: number = 24;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}